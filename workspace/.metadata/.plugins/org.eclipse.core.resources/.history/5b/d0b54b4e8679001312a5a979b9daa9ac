package learnscala1

object test12 {
    println("Welcome to the Scala worksheet")

    
    def range(start: Int, end: Int): Stream[Int] =
        if (start >= end) Stream.empty
        else
            Stream.cons(start, range(start + 1, end))
            
    def isPrime(n: Int) : Boolean =
        !((range(2,  n / 2) exists (x => n % x == 0)))
                                 
    val x = 10
    isPrime(x)
    isPrime(1009)
    ((1000 until 10000) filter isPrime)  apply 3
    
    def constructStream(n : Int) :Stream[Int] = n #:: constructStream(n+1)
    
    val infi = (constructStream(100) takeWhile (x => x < 120)).toList
    
    var s1 = Stream(1,2,3,4,5)
    var s2 = Stream(10,20,30,40)
    
    
    def getAllPrimeNumber(xs : Stream[Int]) : Stream[Int] = {
    	xs.head #:: getAllPrimeNumber(xs.tail filter (_ % xs.head != 0))
    }
    
    val primes = getAllPrimeNumber(constructStream(2))
		def sqrt(n : Int) : Double = {
			def improve(x : Double) = (x + n/x)/2
			lazy val guesses : Stream[Double] = 1 #:: (guesses map improve)
			
			def iter(xs : Stream[Double]) : Double = {
				if (xs.tail == Stream.Empty || xs.tail.head == xs.head) xs.head
				else if (xs.tail != xs.head) iter(xs.tail)
				else xs.head
			}
			iter(guesses)
		}
		
		def rsqrt(n: Int) = {
			val guess = sqrt(n)
			def iter(xs : Stream[Double]) : Double = {
				if (xs.tail == Stream.Empty || xs.tail.head == xs.head) xs.head
				else if (xs.tail != xs.head) iter(xs.tail)
				else xs.head
			}
			iter(guess)
		}
		rsqrt(123345556)

}