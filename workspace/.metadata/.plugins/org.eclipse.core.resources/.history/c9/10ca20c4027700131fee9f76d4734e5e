package learnscala1

trait List[T] {
	def isEmpty : Boolean
	def head : T
	def tail : List[T]
	def findElement(x : T);
}

class Cons[T](val head : T, val tail: List[T]) extends List[T] {
    def isEmpty = false
}

class Nil[T] extends List[T] {
    def isEmpty : Boolean = true
    def head : Nothing = throw new NoSuchElementException ("nil.head")
    def tail : Nothing = throw new NoSuchElementException ("nil.tail")
    def findElement(x : T) : Nothing = throw new IndexOutOfBoundException("index out of bound");
}