package spark

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.spark.rdd._

class RegressionTree {

    val context = new SparkContext("local", "SparkContext")
    val dataInputURL = "/home/loveallufev/semester_project/input/small_input2"
    var featureSet = new FeatureSet("/home/loveallufev/semester_project/input/tag_small_input2", context)

    val myDataFile = context.textFile(dataInputURL, 1)
    var myDataFile2 = scala.io.Source.fromFile(dataInputURL).getLines.toStream

    var mydata = myDataFile2.map(line => line.split(","))
    /*
    featureSet.data.map(x => x.clear)
    data.foreach(line => processLine(line))
    //data.map(line => processLine(line))

    
    val bestSplitPoints = featureSet.data.map(x => (x, x.getBestSplitPoint)).dropRight(1)

    //bestSplitPoints.foreach(println)
    val bestSplitPoint = (bestSplitPoints.maxBy(_._2._3))
    println(bestSplitPoint._1.getPossibleSplitPoints)
    var root: Node =
        new NonEmpty(
            bestSplitPoint._1, // featureInfo
            bestSplitPoint._2._2 match { // left + right conditions
                case s: Set[Any] => (s.toString, (bestSplitPoint._1.getPossibleSplitPoints.toSet &~ s).toString)
            },
            new Empty(), // left
            new Empty()) // right
    println(root.toString)
	*/
    println(BuildTree(mydata))
    
    def BuildTree(data: Stream[Array[String]]): Node = {
        println("Enter Building tree")
        println("Data=" + data)
        var i = 0;
        featureSet.data.map(x => x.clear)
        data.foreach(line => { println(line);i = i + 1; processLine(line) })
        
        if (i == 0) new Empty()
        else {
            println("Enter Building tree ELSE")
            val bestSplitPoints = featureSet.data.map(x => (x, x.getBestSplitPoint)).dropRight(1)

            //bestSplitPoints.foreach(println)
            val bestSplitPoint = (bestSplitPoints.maxBy(_._2._3))
            println(bestSplitPoint._1.getPossibleSplitPoints)
            var left : Stream[Array[String]] = Stream[Array[String]]()
            var right : Stream[Array[String]] = Stream[Array[String]]()
            
            bestSplitPoint._2._2 match {
                case d: Double => { // This is a splitting point on numerical feature
                    left = data filter (x => (x(bestSplitPoint._1.index).toDouble < d))
                    right = data filter (x => (x(bestSplitPoint._1.index).toDouble >= d))
                    new NonEmpty(
                        bestSplitPoint._1, // featureInfo
                        ("< " + d, ">= " + d),	// left + right conditions
                        BuildTree(left), // left
                        BuildTree(right)	// right
                        )
                }
                case s : Set[Any] => {
                    left = data filter (x => s.contains(x(bestSplitPoint._1.index)) )
                    right = data filter (x => !s.contains(x(bestSplitPoint._1.index)))
                    new NonEmpty(
                        bestSplitPoint._1, // featureInfo
                        (s.toString, (bestSplitPoint._1.getPossibleSplitPoints.toSet &~ s).toString),	// left + right conditions
                        BuildTree(left), // left
                        BuildTree(right)	// right
                        )
                }

            }
            
            new NonEmpty(
                        bestSplitPoint._1, // featureInfo
                        bestSplitPoint._2._2 match { // left + right conditions
                            case s: Set[Any] => (s.toString, (bestSplitPoint._1.getPossibleSplitPoints.toSet &~ s).toString)
                        },
                        BuildTree(left), // left
                        BuildTree(right)
                        ) // right
        }

    }
	
    def processLine(fields: Array[String]) : Unit = {
        var i = 0;
        var yValue = parseDouble(fields(fields.length - 1))
        yValue match {
            case Some(yValueDouble) =>
                fields.map(f => {
                    featureSet.data(i).addValue(f, yValueDouble)
                    i = (i + 1) % featureSet.numberOfFeature
                })
            case None => "Invalid data"
        }
    }

    private def parseDouble(s: String) = try { Some(s.toDouble) } catch { case _ => None }
}