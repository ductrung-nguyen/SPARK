package learnscala1

object test11 {

class Poly(val terms0: Map[Int, Double]){
	val terms = terms0 withDefaultValue 0.0
	def this(binds : (Int, Double)*) = this(binds.toMap)
	def this(bool : Boolean) = this (Map(1 -> 1.0, 2 -> 2.0,3 -> 3.0))
	
	def + (that : Poly) = new Poly( that.terms folkleft terms)(addTerm)
	
	def addTerm(terms : Map[Int, Double], term : (Int, Double)) : (Int, Double) = {
		val (exp, cof) = term
		term + (exp -> (cof + term(exp)) )
	}

	override def toString() =
		(for ((exp, coff) <- terms.toList.sorted.reverse) yield coff + "x^" + exp) mkString " + "
}

  val x = new Poly(Map(1 -> 2.0, 3 -> 4.0, 5 -> 6.2))
  val y = new Poly(0 -> 3.0, 3 -> 7.0)
  val z = new Poly(true)
  x + z
  x + y
  
  val map = Map(1 -> 2.0, 2-> 3.0, 3->4.0, 4-> 6.0)
  val map2 = Map(2->8.0, 3-> 1.0)
  map folkLeft map2 ((k,v) => )
}