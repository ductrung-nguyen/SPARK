package learnscala1

trait List[T] {
	def isEmpty : Boolean
	def head : T
	def tail : List[T]
	def findElementAtIndex(n : Int) : T;
}

class Cons[T](val head : T, val tail: List[T]) extends List[T] {
    def isEmpty = false
    
    def findElementAtIndex(n : Int) : T = {
        def findElementIter(i : Int, ls : List[T]) : T =
            if (i == 0) ls.head
            else findElementIter(i-1, ls.tail)
            
        findElementIter(n, this)
    }
}

class Nil[T] extends List[T] {
    def isEmpty : Boolean = true
    def head : Nothing = throw new NoSuchElementException ("nil.head")
    def tail : Nothing = throw new NoSuchElementException ("nil.tail")
    def findElementAtIndex(n : Int) : Nothing = throw new IndexOutOfBoundsException("index out of bound");
}