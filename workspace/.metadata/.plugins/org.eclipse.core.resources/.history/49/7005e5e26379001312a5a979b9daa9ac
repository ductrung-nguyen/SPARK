package learnscala1

object test11 {

class Poly(val terms: Map[Int, Double]){

	def this(binds : (Int, Double)*) = this(binds.toMap)
	def this(bool : Boolean) = this (Map(1 -> 1.0, 2 -> 2.0,3 -> 3.0))
	def + (that : Poly) = new Poly(terms ++ (that.terms map adjust))
	
	def adjust(term : (Int, Double)) : (Int, Double) = {
		val (exp, cof) = term
		terms get exp match {
			case None => (exp -> cof)
			case Some(cof1) => (exp -> (cof + cof1))
		}
	}

	override def toString() =
		(for ((exp, coff) <- terms.toList.sorted.reverse) yield coff + "x^" + exp) mkString " + "
}

  val x = new Poly(Map(1 -> 2.0, 3 -> 4.0, 5 -> 6.2))
                                                  //> x  : learnscala1.test11.Poly = 6.2x^5 + 4.0x^3 + 2.0x^1
  val y = new Poly(0 -> 3.0, 3 -> 7.0)            //> y  : learnscala1.test11.Poly = 7.0x^3 + 3.0x^0
  val z = new Poly(true)                          //> z  : learnscala1.test11.Poly = 3.0x^3 + 2.0x^2 + 1.0x^1
  x + z                                           //> res0: learnscala1.test11.Poly = 6.2x^5 + 7.0x^3 + 2.0x^2 + 3.0x^1
  x + y
}