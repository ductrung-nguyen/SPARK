package spark

trait Node {
	def condition: Nothing
	var feature: FeatureInfo
	def left : Node
	def right : Node
	def isEmpty : Boolean
	def toStringWithLevel(level : Int) :String
}

case class Empty extends Node {
    def isEmpty = true
    def condition = throw new NoSuchElementException ("empty.condition")
    def left = throw new NoSuchElementException ("empty.left")
    def right = throw new NoSuchElementException ("empty.right")
    var feature : FeatureInfo =  FeatureInfo("Empty", "0" ,0)
    def toStringWithLevel(level : Int) = "".padTo(2*level, "-") + "Empty"
}

case class NonEmpty(xFeature : FeatureInfo, xCondition : Any, xLeft : Node, xRight: Node) extends Node {
    def isEmpty = false
    def condition = xCondition
    def left = xLeft
    def right = xRight
    var feature : FeatureInfo =  xFeature
    
    def toStringWithLevel(level : Int) = "".padTo(2*level, "-") + feature.Name + "\n" + "|" + xLeft.toStringWithLevel(level+1)
}